

Original file is located at
    https://colab.research.google.com/drive/1cGZeLqMzHWmpaDjCItrMSkvlA9787x-8
"""

import warnings
warnings.filterwarnings('ignore')

"""##Import Libraries"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""##Import Dataset"""

fname = 'gender-classifier-DFE-791531.csv'


try:
    df = pd.read_csv(fname, encoding='latin-1', engine='python', on_bad_lines='skip')
except UnicodeDecodeError:
    # Fallback to ISO-8859-1 if latin-1 somehow fails
    df = pd.read_csv(fname, encoding='ISO-8859-1', engine='python', on_bad_lines='skip')

print(f"Loaded dataset with shape: {df.shape}")
df.head(3)

"""##Quick inspect & preprocessing"""

# columns, types, missing stats
print(df.columns.tolist())
df.info()
df.isnull().sum().sort_values(ascending=False).head(15)

for col in ['created', 'tweet_created']:
    if col in df.columns:
        df[col + '_dt'] = pd.to_datetime(df[col], errors='coerce', infer_datetime_format=True)
df[['created','created_dt','tweet_created','tweet_created_dt']].head()

# account age in days (tweet time - profile created)
if 'created_dt' in df.columns and 'tweet_created_dt' in df.columns:
    df['account_age_days'] = (df['tweet_created_dt'] - df['created_dt']).dt.days

# ensure numeric columns exist
for col in ['fav_number','retweet_count','tweet_count','gender:confidence','profile_yn:confidence']:
    if col in df.columns:
        df[col] = pd.to_numeric(df[col], errors='coerce')

# weekday of tweet
if 'tweet_created_dt' in df.columns:
    df['tweet_weekday'] = df['tweet_created_dt'].dt.day_name()

"""##Set plotting style and palettes:"""

import matplotlib.pyplot as plt
import seaborn as sns
sns.set(style='whitegrid', context='notebook')

"""##Gender distribution"""

plt.figure(figsize=(7,4))
order = df['gender'].value_counts(dropna=False).index
palette = sns.color_palette("Set2", n_colors=len(order))
sns.countplot(data=df, x='gender', order=order, palette=palette)
plt.title('Gender distribution (column `gender`)')
plt.xlabel('gender')
plt.ylabel('count')
plt.tight_layout()
plt.show()

"""##Tweet counts distribution"""

plt.figure(figsize=(10,4))
plt.subplot(1,2,1)
sns.histplot(df['tweet_count'].dropna(), bins=50, kde=False, color='tab:blue')
plt.title('tweet_count distribution')

"""##Simple numeric correlation heatmap"""

numcols = ['fav_number','retweet_count','tweet_count','account_age_days','gender:confidence']
numcols = [c for c in numcols if c in df.columns]
plt.figure(figsize=(6,5))
sns.heatmap(df[numcols].corr(), annot=True, cmap='coolwarm', center=0)
plt.title('Numeric feature correlations')
plt.tight_layout(); plt.show()

"""##Profile vs not"""

plt.figure(figsize=(6,4))
palette = ['#66c2a5','#fc8d62']
sns.countplot(data=df, x='profile_yn', palette=palette, order=['yes','no'])
plt.title('Has profile? (profile_yn)')
plt.tight_layout(); plt.show()

"""##Sentiment analysis"""

!pip install vaderSentiment

from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
analyzer = SentimentIntensityAnalyzer()

def vader_sentiment(s):
    if pd.isna(s): return None
    score = analyzer.polarity_scores(str(s))
    return score['compound']

df['text_sentiment'] = df['text'].apply(vader_sentiment) if 'text' in df.columns else None
# sentiment label
def label_sent(x):
    if x is None or pd.isna(x): return 'missing'
    if x >= 0.05: return 'positive'
    if x <= -0.05: return 'negative'
    return 'neutral'

if 'text_sentiment' in df.columns:
    df['text_sentiment_label'] = df['text_sentiment'].apply(label_sent)
    plt.figure(figsize=(6,4))
    pal = {'positive':'#2ca02c','neutral':'#7f7f7f','negative':'#d62728'}
    sns.countplot(data=df, x='text_sentiment_label', order=['positive','neutral','negative'], palette=pal)
    plt.title('Tweet sentiment distribution (VADER)')
    plt.tight_layout(); plt.show()

"""##Sentiment by weekday"""

if 'tweet_weekday' in df.columns and 'text_sentiment_label' in df.columns:
    plt.figure(figsize=(10,5))
    # a grouped bar chart: percent positive/neutral/negative per weekday
    weekday_order = ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']
    tmp = (df.dropna(subset=['tweet_weekday','text_sentiment_label'])
           .groupby(['tweet_weekday','text_sentiment_label']).size().reset_index(name='count'))
    # normalize by weekday
    denom = tmp.groupby('tweet_weekday')['count'].transform('sum')
    tmp['pct'] = tmp['count'] / denom
    sns.barplot(data=tmp, x='tweet_weekday', y='pct', hue='text_sentiment_label',
                hue_order=['positive','neutral','negative'], order=weekday_order, palette=pal)
    plt.ylabel('Proportion')
    plt.title('Proportion of sentiment by weekday')
    plt.xticks(rotation=45)
    plt.tight_layout(); plt.show()